#include <iostream>
#include <vector>
#include <memory>

class Component {
public:
    virtual void operation() = 0;
};

class Leaf : public Component {
public:
    void operation() override { std::cout << "Leaf Operation\n"; }
};

class Composite : public Component {
private:
    std::vector<std::shared_ptr<Component>> children;
public:
    void add(std::shared_ptr<Component> child) { children.push_back(child); }
    void operation() override {
        for (const auto& child : children) child->operation();
    }
};

int main() {
    Composite composite;
    composite.add(std::make_shared<Leaf>());
    composite.operation();
    return 0;
}
